#      Estimate Std. Error t value Pr(>|t|)
#x0   5.367e+00  7.598e-02  70.643  < 2e-16 ***
#kg   4.973e-01  2.585e-02  19.237  6.2e-11 ***
#Nmax 6.077e+08  1.223e+08   4.967 0.000257 ***
#Residual standard error: 0.1516 on 13 degrees of freedom
Fit1705.Tenth<-nls(yfit~ MODsolver(x0,c(kg,Nmax)),control=nls.control(tol=1e-4),start=list(x0=5.3,kg=0.68,Nmax=1.8e9) )
Fit1705.Tenth<-nls(yfit~ MODsolver(x0,c(kg,Nmax)),control=nls.control(tol=1e-4),start=list(x0=5.3,kg=0.6,Nmax=1.8e9) )
Fit1705.Tenth<-nls(yfit~ MODsolver(x0,c(kg,Nmax)),control=nls.control(tol=1e-4),start=list(x0=5.6,kg=0.6,Nmax=1.8e9) )
Fit1705.Tenth<-nls(yfit~ MODsolver(x0,c(kg,Nmax)),control=nls.control(tol=1e-4),start=list(x0=5.5,kg=0.4,Nmax=1.8e9) )
summary(Fit1705.Tenth)
10^8.95
10^8.355
workdata<-read.csv("C:/stuffs/research/StatConsulting/Hirsch/Data/KP13883DataFormat.csv",header = TRUE, sep = ",", quote="\"", dec=".",
fill = TRUE, comment.char="")
### Fit the ODE for full strength string
y<-workdata$KP13883Full
tobs<-workdata$Hour
yfit<-y[!is.na(y)]
tobs<-tobs[!is.na(y)]
Fit13883.Full<-nls(yfit~ MODsolver(x0,c(kg,Nmax)),start=list(x0=5.1,kg=0.68,Nmax=1.2e9) )
summary(Fit13883.Full)
#Parameters:
#      Estimate Std. Error t value Pr(>|t|)
#x0   5.351e+00  6.559e-02  81.581  < 2e-16 ***
#kg   7.625e-01  2.830e-02  26.946 8.59e-13 ***
#Nmax 1.381e+09  1.637e+08   8.434 1.25e-06 ***
#Residual standard error: 0.1187 on 13 degrees of freedom
### Fit the ODE for 1/4 strength string
y<-workdata$KP13883Quarter
tobs<-workdata$Hour
yfit<-y[!is.na(y)]
tobs<-tobs[!is.na(y)]
Fit13883.Quarter<-nls(yfit~ MODsolver(x0,c(kg,Nmax)),control=nls.control(tol=1e-4),start=list(x0=5.3,kg=0.68,Nmax=1.4e9) )
summary(Fit13883.Quarter)
#      Estimate Std. Error t value Pr(>|t|)
#x0   5.313e+00  5.456e-02  97.372  < 2e-16 ***
#kg   6.797e-01  2.140e-02  31.759 1.05e-13 ***
#Nmax 1.697e+09  1.936e+08   8.768 8.08e-07 ***
#Residual standard error: 0.1027 on 13 degrees of freedom
### Fit the ODE for 1/10 strength string
y<-workdata$KP13883Tenth
tobs<-workdata$Hour
yfit<-y[!is.na(y)]
tobs<-tobs[!is.na(y)]
Fit13883.Tenth<-nls(yfit~ MODsolver(x0,c(kg,Nmax)),control=nls.control(tol=1e-4),start=list(x0=5.5,kg=0.4,Nmax=1.8e9) )
summary(Fit13883.Tenth)
#      Estimate Std. Error t value Pr(>|t|)
#x0   5.548e+00  1.009e-01  54.970  < 2e-16 ***
#kg   5.582e-01  4.142e-02  13.477 5.13e-09 ***
#Nmax 4.318e+08  8.994e+07   4.801 0.000346 ***
#Residual standard error: 0.1872 on 13 degrees of freedom
Fit13883.Full<-nls(yfit~ MODsolver(x0,c(kg,Nmax)),start=list(x0=4.6,kg=0.68,Nmax=1.2e9) )
summary(Fit13883.Full)
Fit13883.Full<-nls(yfit~ MODsolver(x0,c(kg,Nmax)), control=nls.control(tol=1e-4),start=list(x0=4.6,kg=0.68,Nmax=1.2e9) )
summary(Fit13883.Full)
Fit13883.Full<-nls(yfit~ MODsolver(x0,c(kg,Nmax)), control=nls.control(tol=1e-4),start=list(x0=4.6,kg=0.68,Nmax=8e9) )
summary(Fit13883.Full)
Fit13883.Full<-nls(yfit~ MODsolver(x0,c(kg,Nmax)), control=nls.control(tol=1e-4),start=list(x0=4.6,kg=0.98,Nmax=8e9) )
summary(Fit13883.Full)
10^9.5
Fit13883.Full<-nls(yfit~ MODsolver(x0,c(kg,Nmax)), control=nls.control(tol=1e-4),start=list(x0=4.8,kg=0.98,Nmax=3e9) )
summary(Fit13883.Full)
Fit13883.Full<-nls(yfit~ MODsolver(x0,c(kg,Nmax)), control=nls.control(tol=1e-4),start=list(x0=4.8,kg=1.2,Nmax=3e9) )
summary(Fit13883.Full)
Fit13883.Full<-nls(yfit~ MODsolver(x0,c(kg,Nmax)), control=nls.control(tol=1e-4),start=list(x0=4.8,kg=0.8,Nmax=1.9e9) )
summary(Fit13883.Full)
yfit
workdata$KP13883Full
y<-workdata$KP13883Full
tobs<-workdata$Hour
yfit<-y[!is.na(y)]
tobs<-tobs[!is.na(y)]
Fit13883.Full<-nls(yfit~ MODsolver(x0,c(kg,Nmax)), control=nls.control(tol=1e-4),start=list(x0=4.8,kg=0.8,Nmax=1.9e9) )
summary(Fit13883.Full)
############## KPVM9 ##########################
## Input data
workdata<-read.csv("C:/stuffs/research/StatConsulting/Hirsch/Data/KPVM9DataFormat.csv",header = TRUE, sep = ",", quote="\"", dec=".",
fill = TRUE, comment.char="")
### Fit the ODE for full strength string
y<-workdata$KPVM9Full
tobs<-workdata$Hour
yfit<-y[!is.na(y)]
tobs<-tobs[!is.na(y)]
FitVM9.Full<-nls(yfit~ MODsolver(x0,c(kg,Nmax)), control=nls.control(tol=1e-4),start=list(x0=4.8,kg=0.8,Nmax=1.9e9) )
summary(FitVM9.Full)
#Parameters:
#      Estimate Std. Error t value Pr(>|t|)
#x0   5.135e+00  1.254e-01  40.944  < 2e-16 ***
#kg   8.016e-01  5.268e-02  15.218 8.14e-13 ***
#Nmax 1.921e+09  4.447e+08   4.319 0.000303 ***
#Residual standard error: 0.28 on 21 degrees of freedom
### Fit the ODE for 1/4 strength string
y<-workdata$KPVM9Quarter
tobs<-workdata$Hour
yfit<-y[!is.na(y)]
tobs<-tobs[!is.na(y)]
FitVM9.Quarter<-nls(yfit~ MODsolver(x0,c(kg,Nmax)),control=nls.control(tol=1e-4),start=list(x0=5.3,kg=0.68,Nmax=1.4e9) )
summary(FitVM9.Quarter)
#      Estimate Std. Error t value Pr(>|t|)
#x0   5.165e+00  9.697e-02  53.267  < 2e-16 ***
#kg   7.393e-01  4.013e-02  18.423 1.07e-10 ***
#Nmax 1.324e+09  2.463e+08   5.377 0.000126 ***
#Residual standard error: 0.1782 on 13 degrees of freedom
### Fit the ODE for 1/10 strength string
y<-workdata$KPVM9Tenth
tobs<-workdata$Hour
yfit<-y[!is.na(y)]
tobs<-tobs[!is.na(y)]
FitVM9.Tenth<-nls(yfit~ MODsolver(x0,c(kg,Nmax)),control=nls.control(tol=1e-4),start=list(x0=5.5,kg=0.4,Nmax=1.8e9) )
summary(FitVM9.Tenth)
#      Estimate Std. Error t value Pr(>|t|)
#x0   5.182e+00  1.020e-01  50.806 2.44e-16 ***
#kg   5.845e-01  3.477e-02  16.809 3.36e-10 ***
#Nmax 1.307e+09  3.365e+08   3.884  0.00188 **
#Residual standard error: 0.2029 on 13 degrees of freedom
Fit13883.Full$par
Fit13883.Full$kg
Fit13883.Full$est
Fit13883.Full$
e
Fit13883.Full$f
summary(Fit13883.Full)
summary(Fit13883.Full)$pa
summary(Fit13883.Full)$par$kg
summary(Fit13883.Full)$par[,kg]
summary(Fit13883.Full)$par[]
summary(Fit13883.Full)$par[1,]
summary(Fit13883.Full)$par["kg","Estimate"]
nlsfit
nls
help("nls")
coef(Fit13883.Full)
df(Fit13883.Full)
Fit13883.Full$m
Fit13883.Full$data
Fit13883.Full$call
Fit13883.Full$model
summary(summary(Fit13883.Full))
Full13883=summary(Fit13883.Full)
Full13883$df
Full13883$coe
Full13883$par
Full13883$par$kg
Full13883$par$est
Full13883$par["kg","Estimate"]
Full13883$par["kg","Estimate"],Full1705$par["kg","Estimate"],
Full13883$par["kg","Estimate"]
Full1705$par["kg","Estimate"]
Full1705=summary(Fit1705.Full)
Full1705$par["kg","Estimate"]
Full13883$df[2]
Full1705$df[2]
Full13883$par["kg","Std. Error"]
Full13883=summary(Fit13883.Full)
Full1705=summary(Fit1705.Full)
m1=Full13883$par["kg","Estimate"]
m2=Full1705$par["kg","Estimate"]
n1=Full13883$df[2]+1
n2=Full1705$df[2]+1
s1=Full13883$par["kg","Std. Error"]*sqrt(n1)
s2=Full1705$par["kg","Std. Error"]*sqrt(n2)
t.test2(m1,m2,s1,s2,n1,n2)
m1
m2
Full13883
Full1705
n1
n2
s1
s2
Quarter13883=summary(Fit13883.Quarter)
Quarter1705=summary(Fit1705.Quarter)
m1=Quarter13883$par["kg","Estimate"]
m2=Quarter1705$par["kg","Estimate"]
n1=Quarter13883$df[2]+1
n2=Quarter1705$df[2]+1
s1=Quarter13883$par["kg","Std. Error"]*sqrt(n1)
s2=Quarter1705$par["kg","Std. Error"]*sqrt(n2)
t.test2(m1,m2,s1,s2,n1,n2)
Tenth13883=summary(Fit13883.Tenth)
Tenth1705=summary(Fit1705.Tenth)
m1=Tenth13883$par["kg","Estimate"]
m2=Tenth1705$par["kg","Estimate"]
n1=Tenth13883$df[2]+1
n2=Tenth1705$df[2]+1
s1=Tenth13883$par["kg","Std. Error"]*sqrt(n1)
s2=Tenth1705$par["kg","Std. Error"]*sqrt(n2)
t.test2(m1,m2,s1,s2,n1,n2)
Full6153=summary(Fit6153.Full)
m1=Full13883$par["kg","Estimate"]
m2=Full6153$par["kg","Estimate"]
n1=Full13883$df[2]+1
n2=Full6153$df[2]+1
s1=Full13883$par["kg","Std. Error"]*sqrt(n1)
s2=Full6153$par["kg","Std. Error"]*sqrt(n2)
t.test2(m1,m2,s1,s2,n1,n2)
#Difference of means   Std Error         t            p-value
#    0.03906407       0.05979539      0.65329561     0.51842341
# Quarter strength
Quarter6153=summary(Fit6153.Quarter)
m1=Quarter13883$par["kg","Estimate"]
m2=Quarter6153$par["kg","Estimate"]
n1=Quarter13883$df[2]+1
n2=Quarter6153$df[2]+1
s1=Quarter13883$par["kg","Std. Error"]*sqrt(n1)
s2=Quarter6153$par["kg","Std. Error"]*sqrt(n2)
t.test2(m1,m2,s1,s2,n1,n2)
#Difference of means   Std Error         t            p-value
#     0.05961370       0.04548221    1.31070355      0.20492723
# Tenth strength
Tenth6153=summary(Fit6153.Tenth)
m1=Tenth13883$par["kg","Estimate"]
m2=Tenth6153$par["kg","Estimate"]
n1=Tenth13883$df[2]+1
n2=Tenth6153$df[2]+1
s1=Tenth13883$par["kg","Std. Error"]*sqrt(n1)
s2=Tenth6153$par["kg","Std. Error"]*sqrt(n2)
t.test2(m1,m2,s1,s2,n1,n2)
#Difference of means   Std Error         t            p-value
#    0.02629193        0.05407864     0.48617953     0.63103394
ls
ls()
workdata<-read.csv("C:/stuffs/research/StatConsulting/Hirsch/Data/KP6153DataFormat.csv",header = TRUE, sep = ",", quote="\"", dec=".",
fill = TRUE, comment.char="")
### Fit the ODE for full strength string
y<-workdata$KP6153Full
tobs<-workdata$Hour
yfit<-y[!is.na(y)]
tobs<-tobs[!is.na(y)]
Fit6153.Full<-nls(yfit~ MODsolver(x0,c(kg,Nmax)),start=list(x0=5.1,kg=0.68,Nmax=1.2e9) )
summary(Fit6153.Full)
#Formula: yfit ~ MODsolver(x0, c(kg, Nmax))
#Parameters:
#      Estimate Std. Error t value Pr(>|t|)
#x0   5.073e+00  1.078e-01  47.065 5.53e-15 ***
#kg   6.834e-01  4.297e-02  15.903 1.99e-09 ***
#Nmax 1.208e+09  2.777e+08   4.351 0.000943 ***
#---
#Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
#Residual standard error: 0.2008 on 12 degrees of freedom
#Number of iterations to convergence: 4
#Achieved convergence tolerance: 6.54e-06
### Fit the ODE for 1/4 strength string
y<-workdata$KP6153Quarter
tobs<-workdata$Hour
yfit<-y[!is.na(y)]
tobs<-tobs[!is.na(y)]
Fit6153.Quarter<-nls(yfit~ MODsolver(x0,c(kg,Nmax)),control=nls.control(tol=1e-4),start=list(x0=5.1,kg=0.68,Nmax=1.2e9) )
summary(Fit6153.Quarter)
#      Estimate Std. Error t value Pr(>|t|)
#x0   5.099e+00  1.862e-01  27.381 3.47e-12 ***
#kg   4.945e-01  5.042e-02   9.809 4.41e-07 ***
#Nmax 1.846e+09  1.148e+09   1.608    0.134
#Residual standard error: 0.3962 on 12 degrees of freedom
### Fit the ODE for 1/10 strength string
y<-workdata$KP6153Tenth
tobs<-workdata$Hour
yfit<-y[!is.na(y)]
tobs<-tobs[!is.na(y)]
Fit6153.Tenth<-nls(yfit~ MODsolver(x0,c(kg,Nmax)),control=nls.control(tol=1e-4),start=list(x0=5.1,kg=0.68,Nmax=1.2e9) )
summary(Fit6153.Tenth)
#      Estimate Std. Error t value Pr(>|t|)
#x0   5.367e+00  7.598e-02  70.643  < 2e-16 ***
#kg   4.973e-01  2.585e-02  19.237  6.2e-11 ***
#Nmax 6.077e+08  1.223e+08   4.967 0.000257 ***
#Residual standard error: 0.1516 on 13 degrees of freedom
############## KP1705 ##########################
## Input data
workdata<-read.csv("C:/stuffs/research/StatConsulting/Hirsch/Data/KP1705DataFormat.csv",header = TRUE, sep = ",", quote="\"", dec=".",
fill = TRUE, comment.char="")
### Fit the ODE for full strength string
y<-workdata$KP1705Full
tobs<-workdata$Hour
yfit<-y[!is.na(y)]
tobs<-tobs[!is.na(y)]
Fit1705.Full<-nls(yfit~ MODsolver(x0,c(kg,Nmax)),start=list(x0=5.1,kg=0.68,Nmax=1.2e9) )
summary(Fit1705.Full)
#Parameters:
#      Estimate Std. Error t value Pr(>|t|)
#x0   5.351e+00  6.559e-02  81.581  < 2e-16 ***
#kg   7.625e-01  2.830e-02  26.946 8.59e-13 ***
#Nmax 1.381e+09  1.637e+08   8.434 1.25e-06 ***
#Residual standard error: 0.1187 on 13 degrees of freedom
### Fit the ODE for 1/4 strength string
y<-workdata$KP1705Quarter
tobs<-workdata$Hour
yfit<-y[!is.na(y)]
tobs<-tobs[!is.na(y)]
Fit1705.Quarter<-nls(yfit~ MODsolver(x0,c(kg,Nmax)),control=nls.control(tol=1e-4),start=list(x0=5.3,kg=0.68,Nmax=1.4e9) )
summary(Fit1705.Quarter)
#      Estimate Std. Error t value Pr(>|t|)
#x0   5.313e+00  5.456e-02  97.372  < 2e-16 ***
#kg   6.797e-01  2.140e-02  31.759 1.05e-13 ***
#Nmax 1.697e+09  1.936e+08   8.768 8.08e-07 ***
#Residual standard error: 0.1027 on 13 degrees of freedom
### Fit the ODE for 1/10 strength string
y<-workdata$KP1705Tenth
tobs<-workdata$Hour
yfit<-y[!is.na(y)]
tobs<-tobs[!is.na(y)]
Fit1705.Tenth<-nls(yfit~ MODsolver(x0,c(kg,Nmax)),control=nls.control(tol=1e-4),start=list(x0=5.5,kg=0.4,Nmax=1.8e9) )
summary(Fit1705.Tenth)
#      Estimate Std. Error t value Pr(>|t|)
#x0   5.548e+00  1.009e-01  54.970  < 2e-16 ***
#kg   5.582e-01  4.142e-02  13.477 5.13e-09 ***
#Nmax 4.318e+08  8.994e+07   4.801 0.000346 ***
#Residual standard error: 0.1872 on 13 degrees of freedom
#### Compare KP13883 to KP1705
# Full strength
Full13883=summary(Fit13883.Full)
Full1705=summary(Fit1705.Full)
m1=Full13883$par["kg","Estimate"]
m2=Full1705$par["kg","Estimate"]
n1=Full13883$df[2]+1
n2=Full1705$df[2]+1
s1=Full13883$par["kg","Std. Error"]*sqrt(n1)
s2=Full1705$par["kg","Std. Error"]*sqrt(n2)
t.test2(m1,m2,s1,s2,n1,n2)
#Difference of means   Std Error         t            p-value
#    0.03906407       0.05979539      0.65329561     0.51842341
# Quarter strength
Quarter13883=summary(Fit13883.Quarter)
Quarter1705=summary(Fit1705.Quarter)
m1=Quarter13883$par["kg","Estimate"]
m2=Quarter1705$par["kg","Estimate"]
n1=Quarter13883$df[2]+1
n2=Quarter1705$df[2]+1
s1=Quarter13883$par["kg","Std. Error"]*sqrt(n1)
s2=Quarter1705$par["kg","Std. Error"]*sqrt(n2)
t.test2(m1,m2,s1,s2,n1,n2)
#Difference of means   Std Error         t            p-value
#     0.05961370       0.04548221    1.31070355      0.20492723
# Tenth strength
Tenth13883=summary(Fit13883.Tenth)
Tenth1705=summary(Fit1705.Tenth)
m1=Tenth13883$par["kg","Estimate"]
m2=Tenth1705$par["kg","Estimate"]
n1=Tenth13883$df[2]+1
n2=Tenth1705$df[2]+1
s1=Tenth13883$par["kg","Std. Error"]*sqrt(n1)
s2=Tenth1705$par["kg","Std. Error"]*sqrt(n2)
t.test2(m1,m2,s1,s2,n1,n2)
#Difference of means   Std Error         t            p-value
#    0.02629193        0.05407864     0.48617953     0.63103394
#### Compare KP13883 to KP6153
# Full strength
Full6153=summary(Fit6153.Full)
m1=Full13883$par["kg","Estimate"]
m2=Full6153$par["kg","Estimate"]
n1=Full13883$df[2]+1
n2=Full6153$df[2]+1
s1=Full13883$par["kg","Std. Error"]*sqrt(n1)
s2=Full6153$par["kg","Std. Error"]*sqrt(n2)
t.test2(m1,m2,s1,s2,n1,n2)
#Difference of means   Std Error         t            p-value
#    0.03906407       0.05979539      0.65329561     0.51842341
# Quarter strength
Quarter6153=summary(Fit6153.Quarter)
m1=Quarter13883$par["kg","Estimate"]
m2=Quarter6153$par["kg","Estimate"]
n1=Quarter13883$df[2]+1
n2=Quarter6153$df[2]+1
s1=Quarter13883$par["kg","Std. Error"]*sqrt(n1)
s2=Quarter6153$par["kg","Std. Error"]*sqrt(n2)
t.test2(m1,m2,s1,s2,n1,n2)
#Difference of means   Std Error         t            p-value
#     0.05961370       0.04548221    1.31070355      0.20492723
# Tenth strength
Tenth6153=summary(Fit6153.Tenth)
m1=Tenth13883$par["kg","Estimate"]
m2=Tenth6153$par["kg","Estimate"]
n1=Tenth13883$df[2]+1
n2=Tenth6153$df[2]+1
s1=Tenth13883$par["kg","Std. Error"]*sqrt(n1)
s2=Tenth6153$par["kg","Std. Error"]*sqrt(n2)
t.test2(m1,m2,s1,s2,n1,n2)
#Difference of means   Std Error         t            p-value
#    0.02629193        0.05407864     0.48617953     0.63103394
0.11821979          0.06798055          1.73902364          0.09140499 0.11821979          0.06798055          1.73902364          0.09140499 0.11821979          0.06798055          1.73902364          0.09140499
#### Compare KP13883 to KPVM9
# Full strength
FullVM9=summary(FitVM9.Full)
m1=Full13883$par["kg","Estimate"]
m2=FullVM9$par["kg","Estimate"]
n1=Full13883$df[2]+1
n2=FullVM9$df[2]+1
s1=Full13883$par["kg","Std. Error"]*sqrt(n1)
s2=FullVM9$par["kg","Std. Error"]*sqrt(n2)
t.test2(m1,m2,s1,s2,n1,n2)
#Difference of means   Std Error         t            p-value
#    0.11821979       0.06798055     1.73902364     0.09140499
# Quarter strength
QuarterVM9=summary(FitVM9.Quarter)
m1=Quarter13883$par["kg","Estimate"]
m2=QuarterVM9$par["kg","Estimate"]
n1=Quarter13883$df[2]+1
n2=QuarterVM9$df[2]+1
s1=Quarter13883$par["kg","Std. Error"]*sqrt(n1)
s2=QuarterVM9$par["kg","Std. Error"]*sqrt(n2)
t.test2(m1,m2,s1,s2,n1,n2)
#Difference of means   Std Error         t            p-value
#    0.2447820293    0.0644395416    3.7986308298   0.0009068701
# Tenth strength
TenthVM9=summary(FitVM9.Tenth)
m1=Tenth13883$par["kg","Estimate"]
m2=TenthVM9$par["kg","Estimate"]
n1=Tenth13883$df[2]+1
n2=TenthVM9$df[2]+1
s1=Tenth13883$par["kg","Std. Error"]*sqrt(n1)
s2=TenthVM9$par["kg","Std. Error"]*sqrt(n2)
t.test2(m1,m2,s1,s2,n1,n2)
#Difference of means   Std Error         t            p-value
#    0.08720391       0.04332693     2.01269548     0.05549317
Full13883
Full6153
save.image("C:\\Users\\aidong Main\\Google Drive\\Hirsch\\Data\\.RData")
1+3
x<-1
x
y<-c(1,5,-2,3)
z<-matrix(1,ncol=5,nrow=2)
z
x*z
t(z)
y*z
install.packages("knitr")
ls()
plot(x1)
plot(z)
z
z<-matrix(1:10,nrow=2)
plot(z)
z
plot(t(z)
)
y
z<-matrix(1:8,nrow=2)
z*y
z+y
z%*%y
library("TeachingDemos", lib.loc="C:/Users/aidong Main/Documents/R/win-library/3.0")
dice(1)
dice(1,plot.it=T)
dice(1,plot.it=T)
dice(1,plot.it=T)
dice(1,1,plot.it=T)
dice(1,1,plot.it=T)
dice(1,1,plot.it=T)
dice(1,1,plot.it=T)
dice(1,1,plot.it=T)
dice(1,1,plot.it=T)
dice(1,1,plot.it=T)
dice(1,1,plot.it=T)
x<-dice(1,1,plot.it=T)
x
x
getwd()
setwd(C:/SlidifyProjects)
setwd("C:/SlidifyProjects")
library(slidify)
author("SelfCheck4.1.1")
slidify("index.Rmd")
setwd("C:/SlidifyProjects")
library(slidify)
author("SelfCheck4.1.1")
slidify("index.Rmd")
matrix( rchisq(5*10, df=9), nrow=5)
author("SelfCheck4.1.1")
slidify("index.Rmd")
getwd()
setwd("C:/SlidifyProjects")
author("SelfCheck4.1.1")
publish('SelfCheck4.1.1',host="rpubs")
publish('SelfCheck4.1.1',host="rpubs")
publish('SelfCheck4.1.1','adamding')
publish('SelfCheck4.1.1','adamding')
publish('SelfCheck4.1.1','adamding')
publish('SelfCheck4.1.1','adamding')
publish('adamding','SelfCheck4.1.1')
publish('SelfCheck4.1.1','adamding')
getwd()
library(slidify)
author('temp-test')
publish(".", repo = "temp-test", username = "adamding")
library(slidify)
author('temp-test')
publish(repo = "temp-test", username = "adamding")
getwd()
setwd("C:/SlidifyProjects/SelfCheck4.1.1")
publish(".", repo = "temp-test", username = "adamding")
publish(repo = "temp-test", username = "adamding")
publish(repo = "temp-test", username = "adamding")
setwd()
getwd()
library(slidify)
author('temp-test')
publish(".", repo = "temp-test", username = "adamding")
publish(repo = "temp-test", username = "adamding")
publish(repo = "temp-test", username = "adamding")
publish(".", repo = "temp-test", username = "adamding")
getwd()
setwd("..")
publish(repo = "temp-test", username = "adamding")
publish(repo = "SelfCheck4.1.1", username = "adamding")
publish(repo = "SelfCheck4.1.1", username = "adamding")
library(slidify)
author('temp-test')
publish(".", repo = "temp-test", username = "adamding")
publish(repo = "temp-test", username = "adamding")
publish(repo = "temp-test", username = "adamding")
publish(repo = "temp-test", username = "adamding")
q()
